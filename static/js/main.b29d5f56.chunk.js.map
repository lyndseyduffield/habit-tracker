{"version":3,"sources":["utils/index.js","actions/index.js","reducers/index.js","components/Checkbox.js","components/HabitCard.js","components/Home.js","components/CreateForm.js","components/EditForm.js","components/App.js","index.js"],"names":["getHabitIds","habitsObj","Object","keys","updateHabitStreak","habit","startDate","startOf","endDate","now","moment","newStreak","streak","isAfter","currentLength","length","correctLength","getStreakLength","streakDiff","i","push","slice","diff","ADD_HABIT","EDIT_HABIT","DELETE_HABIT","SET_STATE","UPDATE_STREAK","deleteHabit","id","type","value","updateStreak","check","initialState","lastId","habits","writeState","state","window","localStorage","setItem","JSON","stringify","removeKey","obj","key","filter","objectKey","reduce","accObj","Checkbox","props","class","children","disabled","HabitCard","handleStreakClick","event","match","params","target","checked","dispatch","handleDeleteClick","preventDefault","map","index","lastIndex","onChange","this","title","goal","accountabilityPartner","name","email","endDateToString","format","startDateToString","renderStreak","to","href","onClick","React","Component","connect","ownProps","Home","renderEmpty","habitIds","habitList","useState","Date","setState","useForm","register","handleSubmit","setValue","errors","useEffect","onDatePickerChange","date","onSubmit","data","addHabit","history","placeholder","ref","required","minDate","selected","maxLength","message","pattern","toDate","handleDatePickerChange","editHabit","defaultValue","App","parse","getItem","decodedHabits","acc","parsedHabit","ISO_8601","newHabit","console","log","readState","basename","exact","path","component","CreateForm","EditForm","store","createStore","action","uid","newState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b29d5f56.chunk.js","sourcesContent":["import moment from \"moment\";\n\nexport const getHabitIds = habitsObj => {\n  return habitsObj ? Object.keys(habitsObj) : [];\n};\n\nexport const flattenHabits = habitsObj => {\n  let ids = getHabitIds(habitsObj);\n  return ids.map(id => {\n    return {\n      id,\n      title: habitsObj[id][\"title\"]\n    };\n  });\n};\n\n// Given a habit, returns a new habit with a verified streak, updated if\n// necessary.\nexport const updateHabitStreak = habit => {\n  const startDate = habit.startDate.startOf(\"day\");\n  const endDate = habit.endDate.startOf(\"day\");\n  const now = moment().startOf(\"day\");\n\n  // We need to replace the old streak in case time has passed since the last\n  // \"user login\" occurred\n  let newStreak = habit.streak;\n\n  // If the habit hasn't started yet, then the streak should be empty\n  if (startDate.isAfter(now, \"day\")) {\n    newStreak = [];\n  } else {\n    // figure out the correct streak length and current streak length\n    const currentLength = habit.streak.length;\n    const correctLength = getStreakLength(now, startDate, endDate);\n\n    // figure out if the current streak length is too long, too short, or is correct\n    if (correctLength > currentLength) {\n      let streakDiff = correctLength - currentLength;\n      for (let i = 0; i < streakDiff; i++) {\n        newStreak.push(false);\n      }\n    } else if (correctLength < currentLength) {\n      newStreak = newStreak.slice(0, correctLength);\n    }\n  }\n\n  return { ...habit, streak: newStreak };\n};\n\n// Given a date, will return number of days difference from that date and\n// today's date until it reached the end date (max difference)\nconst getStreakLength = (now, startDate, endDate) => {\n  // check whether the end date is later or todays date is later and take\n  // the earlier of the two\n  if (endDate.isAfter(now, \"days\")) {\n    return now.diff(startDate, \"days\") + 1;\n  } else {\n    return endDate.diff(startDate, \"days\") + 1;\n  }\n};\n","export const ADD_HABIT = \"ADD_HABIT\";\nexport const EDIT_HABIT = \"EDIT_HABIT\";\nexport const DELETE_HABIT = \"DELETE_HABIT\";\nexport const SET_STATE = \"SET_STATE\";\nexport const UPDATE_STREAK = \"UPDATE_STREAK\";\n\nexport const addHabit = habit => {\n  const action = {\n    type: ADD_HABIT,\n    value: habit\n  };\n  return action;\n};\n\nexport const editHabit = (habit, id) => {\n  const action = {\n    type: EDIT_HABIT,\n    value: {\n      id,\n      habit\n    }\n  };\n  return action;\n};\n\nexport const deleteHabit = id => {\n  const action = {\n    type: DELETE_HABIT,\n    value: id\n  };\n  return action;\n};\n\nexport const setState = state => {\n  const action = {\n    type: SET_STATE,\n    value: state\n  };\n  return action;\n};\n\nexport const updateStreak = (id, check) => {\n  const action = {\n    type: UPDATE_STREAK,\n    value: {\n      id,\n      check\n    }\n  };\n  return action;\n};\n","import moment from \"moment\";\nimport { updateHabitStreak } from \"../utils\";\nimport {\n  ADD_HABIT,\n  EDIT_HABIT,\n  SET_STATE,\n  DELETE_HABIT,\n  UPDATE_STREAK\n} from \"../actions\";\n\nconst initialState = {\n  lastId: 0,\n  habits: {}\n};\n\nconst STATE_KEY = \"state\";\n\n// Write redux state to local storage\n// TODO: Make this middleware to remove effects\nconst writeState = state => {\n  window.localStorage.setItem(STATE_KEY, JSON.stringify(state));\n};\n\n// Retrieve Redux state from local storage\nexport const readState = () => {\n  try {\n    let state = JSON.parse(window.localStorage.getItem(STATE_KEY));\n    if (state === {}) {\n      return initialState;\n    } else {\n      const ids = state.habits ? Object.keys(state.habits) : [];\n\n      // Create a new habits object by decoding the date fields for each\n      // habit properly\n      const decodedHabits = ids.reduce((acc, id) => {\n        const parsedHabit = state.habits[id];\n\n        // The date fields have been parsed from strings but have not yet\n        // been parsed into moment date objects\n        const startDate = moment(parsedHabit.startDate, moment.ISO_8601);\n        const endDate = moment(parsedHabit.endDate, moment.ISO_8601);\n\n        // We have to verify that the streak is correct for the habit in\n        // the case that time has passed since the last page load\n        const newHabit = updateHabitStreak({\n          ...parsedHabit,\n          startDate,\n          endDate\n        });\n\n        return { ...acc, [id]: newHabit };\n      }, {});\n\n      // Return the state with parsed habits\n      return { ...state, habits: decodedHabits };\n    }\n  } catch {\n    /* eslint-disable-next-line no-console */\n    console.log(\"Failed to read state from local storage\");\n    return initialState;\n  }\n};\n\nexport function reducer(state = initialState, action) {\n  switch (action.type) {\n    // Use to load the state from local storage when the application\n    // starts, but not to set individual habits\n    case SET_STATE: {\n      return action.value;\n    }\n    case ADD_HABIT: {\n      const uid = state.lastId + 1;\n      const newState = {\n        lastId: uid,\n        habits: { ...state.habits, [uid]: action.value }\n      };\n      writeState(newState);\n      return newState;\n    }\n    case EDIT_HABIT: {\n      const habit = action.value.habit;\n      const newState = {\n        ...state,\n        habits: { ...state.habits, [action.value.id]: habit }\n      };\n      writeState(newState);\n      return newState;\n    }\n    case DELETE_HABIT: {\n      let id = action.value;\n      const newState = {\n        ...state,\n        habits: removeKey(state.habits, id)\n      };\n      writeState(newState);\n      return newState;\n    }\n    case UPDATE_STREAK: {\n      const { id, check } = action.value;\n      const habit = state.habits[id];\n\n      let streak = habit.streak;\n      streak[streak.length - 1] = check;\n\n      const newState = {\n        ...state,\n        habits: {\n          ...state.habits,\n          [id]: { ...habit, streak }\n        }\n      };\n\n      writeState(newState);\n      return newState;\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\n// Removes a top-level key from an object, if it exists.\n// Immutable.\nfunction removeKey(obj, key) {\n  let objectKeys = Object.keys(obj);\n  let filteredKeys = objectKeys.filter(objectKey => key !== objectKey);\n  return filteredKeys.reduce((accObj, objectKey) => {\n    return { ...accObj, [objectKey]: obj[objectKey] };\n  }, {});\n}\n","import React from \"react\";\n\nconst Checkbox = props => {\n  return (\n    <label class=\"checkbox-label\">\n      {props.children}\n      {props.disabled ? (\n        <span class=\"checkbox-custom checkbox-disabled rectangular\"></span>\n      ) : (\n        <span class=\"checkbox-custom rectangular\"></span>\n      )}\n    </label>\n  );\n};\n\nexport default Checkbox;\n","import React from \"react\";\nimport Checkbox from \"./Checkbox.js\";\nimport { connect } from \"react-redux\";\nimport { updateStreak } from \"../actions\";\nimport { Link } from \"react-router-dom\";\nimport moment from \"moment\";\nimport { deleteHabit } from \"../actions\";\nimport \"../css/main.css\";\n\nclass HabitCard extends React.Component {\n  renderStreak(streak, endDate, startDate) {\n    // If there is no streak then the habit has not yet begun\n    if (streak.length === 0) {\n      return <div>This habit hasn't started yet, YA LOSER</div>;\n    }\n\n    // If now is after the end date then the habit has already ended. If the\n    // habit has already ended then the entire streak should be disabled.\n    const now = moment().startOf(\"day\");\n    if (now.isAfter(endDate, \"days\")) {\n      return streak.map((check, index) => {\n        return (\n          <Checkbox disabled={true}>\n            <input\n              key={index}\n              type=\"checkbox\"\n              disabled={true}\n              checked={check}\n            />\n          </Checkbox>\n        );\n      });\n    }\n\n    // Otherwise, the streak is non-empty and is active, so all days in the\n    // streak should be disabled except for the last one.\n    else {\n      const lastIndex = streak.length - 1;\n      return streak.map((check, index) => {\n        if (index === lastIndex) {\n          return (\n            <Checkbox>\n              <input\n                key={index}\n                type=\"checkbox\"\n                onChange={event => this.handleStreakClick(event)}\n                checked={check}\n              />\n            </Checkbox>\n          );\n        } else {\n          return (\n            <Checkbox disabled={true}>\n              <input\n                key={index}\n                type=\"checkbox\"\n                disabled={true}\n                checked={check}\n              />\n            </Checkbox>\n          );\n        }\n      });\n    }\n  }\n\n  handleStreakClick = event => {\n    const id = this.props.id || this.props.match.params.id;\n    const check = event.target.checked;\n    this.props.dispatch(updateStreak(id, check));\n  };\n\n  handleDeleteClick = (event, id) => {\n    event.preventDefault();\n    this.props.dispatch(deleteHabit(id));\n  };\n\n  render() {\n    const { title, goal, streak, startDate, endDate } = this.props.habit;\n    const { name, email } = this.props.habit.accountabilityPartner;\n    const endDateToString = endDate ? endDate.format(\"MMMM Do, YYYY\") : null;\n    const startDateToString = startDate\n      ? startDate.format(\"MMMM Do, YYYY\")\n      : null;\n\n    return (\n      <div class=\"section\">\n        <div class=\"card card-border\">\n          <header class=\"card-header card-element-background\">\n            <p class=\"card-header-title header-font\">{title}</p>\n          </header>\n          <div class=\"card-content\">\n            <div class=\"content flex-item\">\n              <div class=\"flex-element\">\n                <h3>Goal</h3>\n                <p>{goal}</p>\n              </div>\n              <div class=\"flex-element\">\n                <h3>Accountability Partner</h3>\n                <p>name: {name}</p>\n                <p>email: {email}</p>\n              </div>\n            </div>\n          </div>\n          <div class=\"card-content\">\n            <div class=\"content\">\n              {startDateToString} - {endDateToString}\n            </div>\n          </div>\n          <div class=\"card-content\">\n            <div class=\"content\">\n              {this.renderStreak(streak, endDate, startDate)}\n            </div>\n          </div>\n          <footer class=\"card-footer card-element-background\">\n            <Link\n              class=\"card-footer-item is-dark\"\n              to={`/${this.props.id}/edit`}\n            >\n              <strong>Edit</strong>\n            </Link>\n            <a\n              href=\"/\"\n              class=\"card-footer-item is-dark\"\n              onClick={event => {\n                this.handleDeleteClick(event, this.props.id);\n              }}\n            >\n              <strong>Delete</strong>\n            </a>\n          </footer>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  let id;\n\n  try {\n    id = ownProps.match.params.id;\n  } catch {\n    id = ownProps.id;\n  }\n\n  return {\n    habit: state.habits[id]\n  };\n};\n\nexport default connect(mapStateToProps)(HabitCard);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport HabitCard from \"./HabitCard\";\nimport { getHabitIds } from \"../utils\";\n\nclass Home extends React.Component {\n  habitList() {\n    return this.props.habitIds.map(id => {\n      return (\n        <div key={id}>\n          <HabitCard id={id} />\n        </div>\n      );\n    });\n  }\n\n  renderEmpty = () => {\n    return (\n      <div class=\"hero\">\n        <div class=\"hero-body\">\n          <div class=\"container\">\n            <h1 class=\"title\">Create a New Habit!</h1>\n            <div></div>\n            <Link to=\"/new\" class=\"subtitle button banner-button\">\n              Get to it\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  render() {\n    if (this.props.habitIds.length === 0) {\n      return <div class=\"container\">{this.renderEmpty()}</div>;\n    } else {\n      return <div class=\"container\">{this.habitList()}</div>;\n    }\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    habitIds: getHabitIds(state.habits)\n  };\n};\n\nexport default connect(mapStateToProps)(Home);\n","import moment from \"moment\";\nimport React, { useState } from \"react\";\nimport useForm from \"react-hook-form\";\nimport DatePicker from \"react-datepicker\";\nimport { addHabit } from \"../actions\";\nimport { connect } from \"react-redux\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"../css/main.css\";\nimport { updateHabitStreak } from \"../utils\";\n\nconst CreateForm = props => {\n  const [state, setState] = useState({\n    startDate: new Date(),\n    endDate: new Date()\n  });\n\n  const { register, handleSubmit, setValue, errors } = useForm();\n\n  React.useEffect(() => {\n    register({ name: \"startDate\" });\n    register({ name: \"endDate\" });\n    setValue(\"startDate\", new Date());\n    setValue(\"endDate\", new Date());\n  }, [register, setValue]);\n\n  const onSubmit = data => {\n    const startDate = moment(data.startDate);\n    const endDate = moment(data.endDate);\n    const habit = updateHabitStreak({\n      ...data,\n      startDate,\n      endDate,\n      streak: []\n    });\n    props.dispatch(addHabit(habit));\n    props.history.push(\"/\");\n  };\n\n  const onDatePickerChange = (key, date) => {\n    if (key === \"startDate\" && date > state.endDate) {\n      setValue(\"startDate\", date);\n      setValue(\"endDate\", date);\n      setState({ startDate: date, endDate: date });\n    } else {\n      setValue(key, date);\n      setState({ ...state, [key]: date });\n    }\n  };\n\n  return (\n    <form class=\"form-container\" onSubmit={handleSubmit(onSubmit)}>\n      <div class=\"field\">\n        <label class=\"label is-large\">Habit</label>\n        <div class=\"control\">\n          <input\n            class=\"input\"\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Your new habit\"\n            ref={register({ required: true })}\n          />\n        </div>\n        {errors.title && <p class=\"help is-danger\">\"A title is required\"</p>}\n      </div>\n      <div class=\"field\">\n        <label class=\"label\">Goal</label>\n        <div class=\"control\">\n          <textarea\n            class=\"textarea\"\n            type=\"text\"\n            name=\"goal\"\n            placeholder=\"What is your goal?\"\n            ref={register}\n          />\n        </div>\n      </div>\n      <div class=\"field is-grouped is-horizontal\">\n        <div class=\"field-body\">\n          <div class=\"field\">\n            <label class=\"label\">Start Date</label>\n            <div class=\"control\">\n              <DatePicker\n                class=\"dropdown\"\n                minDate={new Date()}\n                selected={state.startDate}\n                onChange={date => {\n                  onDatePickerChange(\"startDate\", date);\n                }}\n              />\n            </div>\n          </div>\n          <div class=\"field\">\n            <label class=\"label\">End Date</label>\n            <div class=\"control\">\n              <DatePicker\n                minDate={state.startDate}\n                selected={state.endDate}\n                onChange={date => {\n                  onDatePickerChange(\"endDate\", date);\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <h3 class=\"label is-large margin-top\">Accountability Partner</h3>\n      <div class=\"field\">\n        <label class=\"label\">Name</label>\n        <div class=\"control\">\n          <input\n            class=\"input\"\n            type=\"text\"\n            name=\"accountabilityPartner.name\"\n            placeholder=\"Your accountability partner's name\"\n            ref={register({\n              maxLength: { value: 40, message: \"This name is too long\" }\n            })}\n          />\n        </div>\n        {errors[\"accountabilityPartner.name\"] && (\n          <p class=\"help is-danger\">\n            <span>{errors[\"accountabilityPartner.name\"].message}</span>\n          </p>\n        )}\n      </div>\n      <div class=\"field\">\n        <label class=\"label\">Email</label>\n        <div class=\"control\">\n          <input\n            class=\"input\"\n            type=\"text\"\n            name=\"accountabilityPartner.email\"\n            placeholder=\"Their email\"\n            ref={register({\n              pattern: {\n                value: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n                message: \"Please enter a valid email\"\n              }\n            })}\n          />\n        </div>\n        {errors[\"accountabilityPartner.email\"] && (\n          <p class=\"help is-danger\">\n            <span>{errors[\"accountabilityPartner.email\"].message}</span>\n          </p>\n        )}\n      </div>\n      <div class=\"control margin-top\">\n        <button class=\"button is-link\">Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default connect()(CreateForm);\n","import moment from \"moment\";\nimport React, { useState } from \"react\";\nimport useForm from \"react-hook-form\";\nimport DatePicker from \"react-datepicker\";\nimport { editHabit } from \"../actions\";\nimport { connect } from \"react-redux\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { updateHabitStreak } from \"../utils\";\n\nconst EditForm = props => {\n  const [state, setState] = useState({\n    startDate: new Date(),\n    endDate: new Date()\n  });\n  const { register, handleSubmit, setValue, errors } = useForm();\n\n  React.useEffect(() => {\n    register({ name: \"startDate\" });\n    register({ name: \"endDate\" });\n  }, [register, setValue]);\n\n  React.useEffect(() => {\n    if (props.habit) {\n      const startDate = props.habit.startDate.toDate();\n      const endDate = props.habit.endDate.toDate();\n      setValue(\"startDate\", startDate);\n      setValue(\"endDate\", endDate);\n      setState({ startDate, endDate });\n    }\n  }, [setValue, props.habit]);\n\n  const handleDatePickerChange = (key, date) => {\n    if (key === \"startDate\" && date > state.endDate) {\n      setValue(\"startDate\", date);\n      setValue(\"endDate\", date);\n      setState({ startDate: date, endDate: date });\n    } else {\n      setValue(key, date);\n      setState({ ...state, [key]: date });\n    }\n  };\n\n  const onSubmit = data => {\n    const id = props.match.params.id;\n    const startDate = moment(data.startDate);\n    const endDate = moment(data.endDate);\n    const habit = updateHabitStreak({\n      ...props.habit,\n      ...data,\n      startDate,\n      endDate\n    });\n    props.dispatch(editHabit(habit, id));\n    props.history.push(\"/\");\n  };\n\n  return (\n    <form class=\"form-container\" onSubmit={handleSubmit(onSubmit)}>\n      <div class=\"field\">\n        <label class=\"label is-large\">Habit</label>\n        <div class=\"control\">\n          <input\n            class=\"input\"\n            type=\"text\"\n            name=\"title\"\n            defaultValue={props.habit && props.habit.title}\n            ref={register({ required: true })}\n          />\n        </div>\n        {errors.title && <p class=\"help is-danger\">\"A title is required\"</p>}\n      </div>\n      <div class=\"field\">\n        <label class=\"label\">Goal</label>\n        <div class=\"control\">\n          <textarea\n            class=\"textarea\"\n            type=\"text\"\n            name=\"goal\"\n            defaultValue={props.habit && props.habit.goal}\n            ref={register}\n          />\n        </div>\n      </div>\n      <div class=\"field is-grouped is-horizontal\">\n        <div class=\"field-body\">\n          <div class=\"field\">\n            <label class=\"label\">Start Date</label>\n            <div class=\"control\">\n              <DatePicker\n                minDate={new Date()}\n                selected={state.startDate}\n                onChange={date => {\n                  handleDatePickerChange(\"startDate\", date);\n                }}\n              />\n            </div>\n          </div>\n          <div class=\"field\">\n            <label class=\"label\">End Date</label>\n            <div class=\"control\">\n              <DatePicker\n                minDate={state.startDate}\n                selected={state.endDate}\n                onChange={date => {\n                  handleDatePickerChange(\"endDate\", date);\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <h3 class=\"label is-large margin-top\">Accountability Partner</h3>\n      <div class=\"field\">\n        <label class=\"label\">Name</label>\n        <div class=\"control\">\n          <input\n            class=\"input\"\n            type=\"text\"\n            name=\"accountabilityPartner.name\"\n            defaultValue={props.habit && props.habit.accountabilityPartner.name}\n            ref={register({\n              maxLength: { value: 40, message: \"This name is too long\" }\n            })}\n          />\n        </div>\n        <p class=\"help is-danger\">\n          {errors[\"accountabilityPartner.name\"] ? (\n            <span>{errors[\"accountabilityPartner.name\"].message}</span>\n          ) : (\n            \"\"\n          )}\n        </p>\n      </div>\n      <div class=\"field\">\n        <label class=\"label\">Email</label>\n        <div class=\"control\">\n          <input\n            class=\"input\"\n            type=\"text\"\n            name=\"accountabilityPartner.email\"\n            defaultValue={\n              props.habit && props.habit.accountabilityPartner.email\n            }\n            ref={register({\n              pattern: {\n                value: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n                message: \"Please enter a valid email\"\n              }\n            })}\n          />\n        </div>\n        <p class=\"help is-danger\">\n          {errors[\"accountabilityPartner.email\"] ? (\n            <span>{errors[\"accountabilityPartner.email\"].message}</span>\n          ) : (\n            \"\"\n          )}\n        </p>\n      </div>\n      <div class=\"control margin-top\">\n        <button class=\"button is-link\">Submit</button>\n      </div>\n    </form>\n  );\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    habit: state.habits[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps)(EditForm);\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport { Link } from \"react-router-dom\";\nimport CreateForm from \"./CreateForm\";\nimport EditForm from \"./EditForm\";\nimport HabitCard from \"./HabitCard\";\nimport { connect } from \"react-redux\";\nimport { setState } from \"../actions\";\nimport { readState } from \"../reducers\";\nimport \"../css/main.css\";\n\nclass App extends React.Component {\n  componentDidMount() {\n    let state = readState();\n    this.props.dispatch(setState(state));\n  }\n\n  render() {\n    return (\n      <Router basename=\"/habit-tracker\">\n        <nav class=\"navbar has-shadow\">\n          <div class=\"navbar-brand\">\n            <div class=\"navbar-item\">\n              <strong>HabitTracker</strong>\n            </div>\n          </div>\n          <div class=\"navbar-end\">\n            <div class=\"navbar-item\">\n              <div class=\"buttons\">\n                <Link to=\"/new\" class=\"button is-light\">\n                  <strong>New Habit</strong>\n                </Link>\n                <Link to=\"/\" class=\"button is-light\">\n                  Home\n                </Link>\n              </div>\n            </div>\n          </div>\n        </nav>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/new\" component={CreateForm} />\n          <Route path=\"/:id/edit\" component={EditForm} />\n          <Route path=\"/:id/show\" component={HabitCard} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default connect()(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { reducer } from \"./reducers\";\nimport App from \"./components/App\";\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}